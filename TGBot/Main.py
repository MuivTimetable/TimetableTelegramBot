import telebot
from keyboa.keyboards import keyboa_maker
from telebot import types
import requests
import re

token = '5309566375:AAH0VgTM1-d8e0FQOlUZlUZIafRwSmxn1Nc'
bot = telebot.TeleBot(token)


class User:
    login = None
    password = None
    identity = None


user = User()


@bot.message_handler(commands=['token'])
def autorization(message):
    mess = '–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –æ—Ç –õ–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞. –¢–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–∏—Ç—Å—è, —á—Ç–æ–± –Ω–∏–∫—Ç–æ –µ–≥–æ –Ω–µ –ø—Ä–æ—á–∏—Ç–∞–ª '
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    btn1 = types.KeyboardButton('–û—Ç–º–µ–Ω–∞')
    markup.add(btn1)
    m = bot.send_message(message.chat.id, mess, reply_markup=markup)
    bot.register_next_step_handler(m, take_login)


def take_login(message):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–∏–ª! –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–¥–∂–µ–Ω–∏—è")
        bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        btn1 = types.KeyboardButton('–û—Ç–º–µ–Ω–∞')
        markup.add(btn1)
        user.login = message.text
        bot.delete_message(message.chat.id, message.id)
        mess = bot.send_message(message.chat.id,
                                '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –õ–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞. –¢–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–∏—Ç—Å—è, —á—Ç–æ–± –Ω–∏–∫—Ç–æ –µ–≥–æ –Ω–µ –ø—Ä–æ—á–∏—Ç–∞–ª',
                                reply_markup=markup)
        bot.register_next_step_handler(mess, take_password)


def take_password(message):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–∏–ª! –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–¥–∂–µ–Ω–∏—è")
        bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        btn1 = types.KeyboardButton('–û—Ç–º–µ–Ω–∞')
        markup.add(btn1)
        user.password = message.text
        bot.delete_message(message.chat.id, message.id)
        m = '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é'
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        btn1 = types.KeyboardButton('–î–∞')
        btn2 = types.KeyboardButton('–ù–µ—Ç')
        markup.add(btn1, btn2)
        mess = bot.send_message(message.chat.id, m, reply_markup=markup)
        bot.register_next_step_handler(mess, auto)


def auto(message):
    if message.text == "–ù–µ—Ç":
        bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–∏–ª! –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–¥–∂–µ–Ω–∏—è")
        bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
    else:
        if message.text == "–î–∞":
            user.identity = str(message.from_user.id)
            data = {"login": user.login, "password": user.password, "userIdentity": user.identity}
            auto = requests.post(api + "auto", json=data)
            if auto:
                token_json = auto.json()
                token = token_json['identityToken']
                user.token = token
                if token != None:
                    m = "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
                    bot.send_message(message.chat.id, m)
                if token_json['autoAnswerOption'] == 2:
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
                    btn1 = types.KeyboardButton('/verification')
                    markup.add(btn1)
                    m1 = '–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –ï—Å–ª–∏ –≤—ã –≤–ø–µ—Ä–≤—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä—É–µ—Ç–µ—Å—å —Å —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞, —Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É - –≤–∞–º –ø—Ä–∏—à–ª–æ –ø–∏—Å—å–º–æ ' \
                         '—Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü—Ä–æ–π–¥–∏—Ç–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é. '
                    bot.send_message(message.chat.id, m1, reply_markup=markup)
                if token_json['autoAnswerOption'] == 1:
                    m2 = '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!'
                    bot.send_message(message.chat.id, m2)

class Verify():
    token = None
    email_code = None
    user_identity = None


verify = Verify()


@bot.message_handler(commands=['verification'])
def verify(message):
    try:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        btn1 = types.KeyboardButton('–û—Ç–º–µ–Ω–∞')
        markup.add(btn1)
        verify.token = user.token
        m = "–í–≤–µ–¥–∏—Ç–µ email-–∫–æ–¥"
        mess = bot.send_message(message.chat.id, m, reply_markup=markup)
        bot.register_next_step_handler(mess, take_verify_code)
    except:
        bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ü—Ä–æ–π–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–≤—Ç–æ—Ä–Ω–æ")

def take_verify_code(message):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–∏–ª! –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–¥–∂–µ–Ω–∏—è")
        bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
    else:
        verify.email_code = message.text
        verify.user_identity = str(message.from_user.id)
        data = {"emailAutoToken": verify.token, "emailCode": verify.email_code, "userIdentity": verify.user_identity}
        verifi = requests.post(api + "verify", json=data)
        token_json = verifi.json()
        if verifi:
            if token_json['verifyAnswerOption']:
                token = token_json['token']
                m = "–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞—à —Ç–æ–∫–µ–Ω:" + str(token)
                bot.send_message(message.chat.id, m)
            else:
                m = "–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞!"
                bot.send_message(message.chat.id, m)
        else:
            m = "–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ!"
            bot.send_message(message.chat.id, m)


class Comment:
    comm = None
    id = None
    token = None


comment = Comment()


class Totalizer():
    id = []
    token = None
    moreOrLess = True


tot = Totalizer()




api = 'https://api.muiv-timetable.cf/api/'


def print_schedluer(sched_json, message):
    for item in sched_json:
        a = 0
        days_leigth = len(sched_json['timetables'])
        while a < days_leigth:
            sched = sched_json['timetables'][a]["schedulers"]
            leight = len(sched_json['timetables'][a]["schedulers"])
            work_date_name = (sched_json['timetables'][a]["work_Date_Name"])
            day = (sched_json['timetables'][a]["dayOfTheWeek"])
            day_text = ('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ ' + work_date_name + ', ' + str(day) + ': \n')
            bot.send_message(message.chat.id, " " + day_text)
            a += 1
            i = 0
            while i < leight:
                tutor = (sched[i]["tutor"])
                para_name = (sched[i]["area"])
                workType = (sched[i]["workType"])
                place = (sched[i]["place"])
                workStart = (sched[i]["workStart"])
                workEnd = (sched[i]["workEnd"])
                comment = (sched[i]["comment"])
                totalizer = (sched[i]["totalizer"])
                id = (sched[i]["scheduler_id"])
                sched_text = (' üïí : ' + str(workStart) + ' ' + str(workEnd) +
                              '\n üóìÔ∏è : ' + para_name +
                              '\n üìò : ' + workType +
                              '\n ‚õ∫ : ' + str(place) +
                              '\n üßë‚Äçüè´ : ' + tutor +
                              '\n üìù : ' + str(comment) +
                              '\n üßë‚Äçüíª : ' + str(totalizer) +
                              '\n id –∑–∞–Ω—è—Ç–∏—è: ' + str(id))
                i = i + 1
                bot.send_message(message.chat.id, '' + sched_text)
        break


def groups1(call):
    d = requests.get(api + 'groups')
    groups_json = d.json()
    groups_leight = len(groups_json['groups'])
    i = 0
    while i < groups_leight:
        a = groups_json['groups'][i]
        for key, value in a.items():
            mess = call.data
            if value == mess:
                b = a["group_id"]
                data = {"token": None, "group_id": b}
                sched = requests.post(api + "scheduler", json=data)
                sched_json = sched.json()
                print_schedluer(sched_json=sched_json, message=call.message)
        i = i + 1


def re_call(call, year, group_name):
    year = year
    group_name = group_name
    group_list = requests.get(api + 'groups')
    groups_json = group_list.json()
    i = -1
    leigh = len(groups_json['groups'])
    list_of_value = []
    group_list = requests.get(api + 'groups')
    groups_json = group_list.json()
    i = -1
    leigh = len(groups_json['groups'])
    list_of_value = []
    list_of_group = []
    while i < (leigh - 1):
        i = i + 1
        if i > leigh:
            break
        else:
            value = groups_json['groups'][i]['group_name']
            result = re.search(year, value)
            if result:
                list_of_value.append(value)
                result1 = re.search(group_name, value)
                if result1:
                    list_of_group.append(value)
    list_of_group.append('–ù–∞–∑–∞–¥')
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:"
    kb_groups = keyboa_maker(items=list_of_group, items_in_row=3, copy_text_to_callback=True)
    bot.edit_message_text(
        chat_id=call.message.chat.id, reply_markup=kb_groups, message_id=call.message.id,
        text=text)


@bot.message_handler(commands=['start'])
def start(message):
    mess = f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ —Ç–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ï—Å–ª–∏ —Ç—ã –∑–¥–µ—Å—å –≤–ø–µ—Ä–≤—ã–µ' \
           f' - –ø—Ä–æ–π–¥–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é. –¢—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—à—å –æ—Ç–º–µ—Ç–∏—Ç—å—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏–∏,' \
           f' –æ–¥–Ω–∞–∫–æ —Ç–µ–±–µ –Ω—É–∂–µ–Ω –±—É–¥–µ—Ç Id –∑–∞–Ω—è—Ç–∏—è - –Ω–∞–π–¥–∏ –µ–≥–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ . –ï—Å–ª–∏ —Ç—ã —Å—Ç–∞—Ä–æ—Å—Ç–∞ –≥—Ä—É–ø–ø—ã, —Ç—ã –º–æ–∂–µ—à—å ' \
           f'–æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–Ω—è—Ç–∏—é.  '
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    btn1 = types.KeyboardButton('/token')
    btn2 = types.KeyboardButton('/scheduler')
    btn3 = types.KeyboardButton('/comment')
    btn4 = types.KeyboardButton('/check_in')
    markup.add(btn1, btn2, btn3, btn4)
    bot.send_message(message.chat.id, mess, parse_mode='html', reply_markup=markup)


@bot.message_handler(commands=['scheduler'])
def sched(message):
    m = "–ö–∞–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å?"
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    btn1 = types.KeyboardButton('–ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
    btn2 = types.KeyboardButton('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥—Ä—É–≥–æ–π –≥—Ä—É–ø–ø—ã')
    markup.add(btn1, btn2)
    mess = bot.send_message(message.chat.id, m, reply_markup=markup)
    bot.register_next_step_handler(mess, get_sched)


def get_sched(message):
    try:
        if message.text == '–ú–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
            token = user.token
            data = {"token": token, "group_id": None}
            sched = requests.post(api + "scheduler", json=data)
            sched_json = sched.json()
            print_schedluer(sched_json=sched_json, message=message)
            bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω")
            bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
        elif message.text == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥—Ä—É–≥–æ–π –≥—Ä—É–ø–ø—ã':
            markup = types.InlineKeyboardMarkup(row_width=1)
            btn1 = types.InlineKeyboardButton("5 –∫—É—Ä—Å", callback_data="2017")
            btn2 = types.InlineKeyboardButton("4 –∫—É—Ä—Å", callback_data="2018")
            btn3 = types.InlineKeyboardButton("3 –∫—É—Ä—Å", callback_data="2019")
            btn4 = types.InlineKeyboardButton("2 –∫—É—Ä—Å", callback_data="2020")
            btn5 = types.InlineKeyboardButton("1 –∫—É—Ä—Å", callback_data="2021")
            markup.add(btn1, btn2, btn3, btn4, btn5)
            m = "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å"
            bot.send_message(message.chat.id, m, reply_markup=markup)
        else:
            m = "–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é"
            bot.send_message(message.chat.id, m)
            bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
    except:
        bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ü—Ä–æ–π–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–≤—Ç–æ—Ä–Ω–æ")


@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    if call.message:
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:"
        if call.data == "2017":
            group_list = requests.get(api + 'groups')
            groups_json = group_list.json()
            i = -1
            leigh = len(groups_json['groups'])
            list_of_value = []
            while i < (leigh - 1):
                i = i + 1
                if i > leigh:
                    break
                else:
                    value = groups_json['groups'][i]['group_name']
                    result = re.search(r'-17', value)
                    if result:
                        list_of_value.append(value)
            list_of_value.append("–ù–∞–∑–∞–¥")
            text = "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:"
            kb_groups = keyboa_maker(items=list_of_value, items_in_row=3, copy_text_to_callback=True)
            bot.edit_message_text(
                chat_id=call.message.chat.id, reply_markup=kb_groups, message_id=call.message.id,
                text=text)
            groups1(call=call)

        elif call.data == "2018":
            markup = types.InlineKeyboardMarkup(row_width=2)
            btn1 = types.InlineKeyboardButton("–£–ó–î", callback_data="–£–ó–î-18")
            btn2 = types.InlineKeyboardButton("–≠–ó–î", callback_data="–≠–ó–î-18")
            btn3 = types.InlineKeyboardButton("–ö–î–ë", callback_data="–ö–î–ë-18")
            btn4 = types.InlineKeyboardButton("–≠–î", callback_data="–≠–î-18")
            btn5 = types.InlineKeyboardButton("–£–î", callback_data="–£–î-18")
            btn6 = types.InlineKeyboardButton("–Æ–î", callback_data="–Æ–î-18")
            btn7 = types.InlineKeyboardButton("–†–Æ", callback_data="–†–Æ-18")
            btn28 = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="–ù–∞–∑–∞–¥")
            markup.add(btn1, btn2, btn3, btn4, btn5, btn6, btn7).add(btn28)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text=text,
                                  reply_markup=markup)
        elif call.data == '–£–ó–î-18':
            re_call(call, year=r'-18', group_name=r'–£–ó–î')
        elif call.data == '–≠–ó–î-18':
            re_call(call, year=r'-18', group_name=r'–≠–ó–î')
        elif call.data == '–ö–î–ë':
            re_call(call, year=r'-18', group_name=r'–ö–î–ë')
        elif call.data == '–£–î-18':
            re_call(call, year=r'-18', group_name=r'–£–î')
        elif call.data == '–≠–î-18':
            re_call(call, year=r'-18', group_name=r'–≠–î')
        elif call.data == '–Æ–î-18':
            re_call(call, year=r'-18', group_name=r'–Æ–î')
        elif call.data == '–Æ–î-18':
            re_call(call, year=r'-18', group_name=r'–†–Æ')
        elif call.data == "2019":
            markup = types.InlineKeyboardMarkup(row_width=3)
            btn1 = types.InlineKeyboardButton("–£–ó–î", callback_data="–£–ó–î-19")
            btn2 = types.InlineKeyboardButton("–≠–ó–î", callback_data="–≠–ó–î-19")
            btn3 = types.InlineKeyboardButton("–†–ö–ë", callback_data="–†–ö–ë=19")
            btn4 = types.InlineKeyboardButton("–Æ–í–î", callback_data="–Æ–í–î-19")
            btn5 = types.InlineKeyboardButton("–£–î", callback_data="–£–î-19")
            btn6 = types.InlineKeyboardButton("–Æ–î", callback_data="–Æ–î-19")
            btn7 = types.InlineKeyboardButton("–°–ü", callback_data="–°–ü-19")
            btn9 = types.InlineKeyboardButton("–ê–ó", callback_data="–ê–ó-19")
            btn10 = types.InlineKeyboardButton("–ó–ë", callback_data="–ó–ë-19")
            btn11 = types.InlineKeyboardButton("–ö–î–ë", callback_data="–ö–î–ë-19")
            btn12 = types.InlineKeyboardButton("–≠–î", callback_data="–≠–î-19")
            btn13 = types.InlineKeyboardButton("–ò–î", callback_data="–ò–î-19")
            btn28 = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="–ù–∞–∑–∞–¥")
            markup.add(btn1, btn2, btn3, btn4, btn5, btn6, btn7, btn9, btn10, btn11, btn12, btn13).add(btn28)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text=text,
                                  reply_markup=markup)
        elif call.data == '–£–ó–î-19':
            re_call(call, year=r'-19', group_name=r'–£–ó–î')
        elif call.data == '–≠–ó–î-19':
            re_call(call, year=r'-19', group_name=r'–≠–ó–î')
        elif call.data == '–†–ö–ë-19':
            re_call(call, year=r'-19', group_name=r'–†–ö–ë')
        elif call.data == '–Æ–í–î-19':
            re_call(call, year=r'-19', group_name=r'–Æ–í–î')
        elif call.data == '–£–î-19':
            re_call(call, year=r'-19', group_name=r'–£–î')
        elif call.data == '–Æ–î-19':
            re_call(call, year=r'-19', group_name=r'–£–ó–î')
        elif call.data == '–°–ü-19':
            re_call(call, year=r'-19', group_name=r'–°–ü')
        elif call.data == '–ê–ó-19':
            re_call(call, year=r'-19', group_name=r'–ê–ó')
        elif call.data == '–ó–ë-19':
            re_call(call, year=r'-19', group_name=r'–ó–ë')
        elif call.data == '–ö–î–ë-19':
            re_call(call, year=r'-19', group_name=r'–ö–î–ë')
        elif call.data == '–≠–î-19':
            re_call(call, year=r'-19', group_name=r'–≠–î')
        elif call.data == '–ò–î-19':
            re_call(call, year=r'-19', group_name=r'–ò–î')


        elif call.data == "2020":
            markup = types.InlineKeyboardMarkup(row_width=3)
            btn1 = types.InlineKeyboardButton("–£–ó–î", callback_data="–£–ó–î-20")
            btn2 = types.InlineKeyboardButton("–≠–ó–î", callback_data="–≠–ó–î-20")
            btn3 = types.InlineKeyboardButton("–ö–ë", callback_data="–ö–ë=20")
            btn4 = types.InlineKeyboardButton("–ö–ó–ë", callback_data="–ö–ó–ë-20")
            btn5 = types.InlineKeyboardButton("–£–î", callback_data="–£–î-20")
            btn6 = types.InlineKeyboardButton("–ö–î–ë", callback_data="–ö–î–ë-20")
            btn7 = types.InlineKeyboardButton("–†–ö–ë", callback_data="–†–ö–ë-20")
            btn9 = types.InlineKeyboardButton("–≠–î", callback_data="–≠–î-20")
            btn10 = types.InlineKeyboardButton("–ü–°–û", callback_data="–ü–°–û-20")
            btn11 = types.InlineKeyboardButton("–ö–û–ú", callback_data="–ö–û–ú-20")
            btn13 = types.InlineKeyboardButton("–ë–£–•", callback_data="–ë–£–•-20")
            btn14 = types.InlineKeyboardButton("–Æ–ó–î", callback_data="–Æ–ó–î-20")
            btn15 = types.InlineKeyboardButton("–Æ–í–î", callback_data="–Æ–í–î-20")
            btn16 = types.InlineKeyboardButton("–ê–î", callback_data="–ê–î-20")
            btn17 = types.InlineKeyboardButton("–†–î", callback_data="–†–î-20")
            btn18 = types.InlineKeyboardButton("–°–ü", callback_data="–°–ü-20")
            btn19 = types.InlineKeyboardButton("–≠–ó", callback_data="–≠–ó-20")
            btn20 = types.InlineKeyboardButton("–†–ö–ó–ë", callback_data="–†–ö–ó–ë-20")
            btn21 = types.InlineKeyboardButton("–ö–í–ë", callback_data="–ö–í–ë-20")
            btn22 = types.InlineKeyboardButton("–Æ–î", callback_data="–Æ–î-20")
            btn23 = types.InlineKeyboardButton("–ò–î", callback_data="–ò–î-20")
            btn24 = types.InlineKeyboardButton("–£–°", callback_data="–£–°-20")
            btn25 = types.InlineKeyboardButton("–£–ó", callback_data="–£–ó-20")
            btn26 = types.InlineKeyboardButton("–≠–î", callback_data="–≠–î-20")
            btn27 = types.InlineKeyboardButton("–≠–°", callback_data="–≠–°-20")
            btn28 = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="–ù–∞–∑–∞–¥")
            markup.add(btn1, btn2, btn3, btn4, btn5, btn6, btn7, btn9, btn10, btn11, btn13, btn14, btn15, btn16,
                       btn17, btn18, btn19, btn20, btn21, btn22, btn23, btn24, btn25, btn26, btn27).add(btn28)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text=text,
                                  reply_markup=markup)
        elif call.data == '–£–ó–î-20':
            re_call(call, year=r'-20', group_name=r'–£–ó–î')
        elif call.data == '–≠–ó–î-20':
            re_call(call, year=r'-20', group_name=r'–≠–ó–î')
        elif call.data == '–ö–ë-20':
            re_call(call, year=r'-20', group_name=r'–ö–ë')
        elif call.data == '–ö–ó–ë-20':
            re_call(call, year=r'-20', group_name=r'–ö–ó–ë')
        elif call.data == '–†–ö–ë-20':
            re_call(call, year=r'-20', group_name=r'–†–ö–ë')
        elif call.data == '–≠–î-20':
            re_call(call, year=r'-20', group_name=r'–≠–î')
        elif call.data == '–ë–£–•-20':
            re_call(call, year=r'-20', group_name=r'–ë–£–•')
        elif call.data == '–Æ–ó–î-20':
            re_call(call, year=r'-20', group_name=r'–Æ–ó–î')
        elif call.data == '–Æ–í–î-20':
            re_call(call, year=r'-20', group_name=r'–Æ–í–î')
        elif call.data == '–ò–î-20':
            re_call(call, year=r'-20', group_name=r'–ò–î')
        elif call.data == '–ê–î-20':
            re_call(call, year=r'-20', group_name=r'–ê–î')
        elif call.data == '–†–î-20':
            re_call(call, year=r'-20', group_name=r'–†–î')
        elif call.data == '–°–ü-20':
            re_call(call, year=r'-20', group_name=r'–°–ü')
        elif call.data == '–≠–ó-20':
            re_call(call, year=r'-20', group_name=r'–≠–ó')
        elif call.data == '–†–ö–ó–ë-20':
            re_call(call, year=r'-20', group_name=r'–†–ö–ó–ë')
        elif call.data == '–ö–í–ë-20':
            re_call(call, year=r'-20', group_name=r'–ö–í–ë')
        elif call.data == '–Æ–î-20':
            re_call(call, year=r'-20', group_name=r'–Æ–î')
        elif call.data == '–ò–î-20':
            re_call(call, year=r'-20', group_name=r'–ò–î')
        elif call.data == '–£–°-20':
            re_call(call, year=r'-20', group_name=r'–£–°')
        elif call.data == '–£–ó-20':
            re_call(call, year=r'-20', group_name=r'–£–ó')
        elif call.data == '–≠–î-20':
            re_call(call, year=r'-20', group_name=r'–≠–î')
        elif call.data == '–≠–°-20':
            re_call(call, year=r'-20', group_name=r'–≠–°')
        elif call.data == '–ö–î–ë-20':
            re_call(call, year=r'-20', group_name=r'–ö–î–ë')
        elif call.data == '–£–î-20':
            re_call(call, year=r'-20', group_name=r'–£–î')
        elif call.data == '–ü–°–û-20':
            re_call(call, year=r'-20', group_name=r'–ü–°–û')
        elif call.data == '–ö–û–ú-20':
            re_call(call, year=r'-20', group_name=r'–ö–û–ú')

        elif call.data == "2021":
            markup = types.InlineKeyboardMarkup(row_width=3)
            btn1 = types.InlineKeyboardButton("–£–ó–î", callback_data="–£–ó–î-20")
            btn2 = types.InlineKeyboardButton("–≠–ó–î", callback_data="–≠–ó–î-20")
            btn3 = types.InlineKeyboardButton("–ö–ë", callback_data="–ö–ë=20")
            btn4 = types.InlineKeyboardButton("–ö–ó–ë", callback_data="–ö–ó–ë-20")
            btn5 = types.InlineKeyboardButton("–£–î", callback_data="–£–î-20")
            btn6 = types.InlineKeyboardButton("–ö–î–ë", callback_data="–ö–î–ë-20")
            btn7 = types.InlineKeyboardButton("–†–ö–ë", callback_data="–†–ö–ë-20")
            btn9 = types.InlineKeyboardButton("–≠–î", callback_data="–≠–î-20")
            btn10 = types.InlineKeyboardButton("–ü–°–û", callback_data="–ü–°–û-20")
            btn11 = types.InlineKeyboardButton("–ö–û–ú", callback_data="–ö–û–ú-20")
            btn12 = types.InlineKeyboardButton("–≠–î", callback_data="–≠–î-20")
            btn13 = types.InlineKeyboardButton("–ë–£–•", callback_data="–ë–£–•-20")
            btn14 = types.InlineKeyboardButton("–Æ–ó–î", callback_data="–Æ–ó–î-20")
            btn15 = types.InlineKeyboardButton("–Æ–í–î", callback_data="–Æ–í–î-20")
            btn16 = types.InlineKeyboardButton("–ê–î", callback_data="–ê–î-20")
            btn17 = types.InlineKeyboardButton("–†–î", callback_data="–†–î-20")
            btn18 = types.InlineKeyboardButton("–°–ü", callback_data="–°–ü-20")
            btn19 = types.InlineKeyboardButton("–≠–ó", callback_data="–≠–ó-20")
            btn20 = types.InlineKeyboardButton("–†–ö–ó–ë", callback_data="–†–ö–ó–ë-20")
            btn21 = types.InlineKeyboardButton("–ö–í–ë", callback_data="–ö–í–ë-20")
            btn22 = types.InlineKeyboardButton("–Æ–î", callback_data="–Æ–î-20")
            btn23 = types.InlineKeyboardButton("–ò–î", callback_data="–ò–î-20")
            btn24 = types.InlineKeyboardButton("–£–°", callback_data="–£–°-20")
            btn25 = types.InlineKeyboardButton("–£–ó", callback_data="–£–ó-20")
            btn26 = types.InlineKeyboardButton("–≠–î", callback_data="–≠–î-20")
            btn27 = types.InlineKeyboardButton("–≠–°", callback_data="–≠–°-20")
            btn28 = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="–ù–∞–∑–∞–¥")
            markup.add(btn1, btn2, btn3, btn4, btn5, btn6, btn7, btn9, btn10, btn11, btn12, btn13, btn14, btn15, btn16,
                       btn17, btn18, btn19, btn20, btn21, btn22, btn23, btn24, btn25, btn26, btn27).add(btn28)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text=text,
                                  reply_markup=markup)
        elif call.data == '–£–ó–î-21':
            re_call(call, year=r'-21', group_name=r'–£–ó–î')
        elif call.data == '–≠–ó–î-21':
            re_call(call, year=r'-21', group_name=r'–≠–ó–î')
        elif call.data == '–ö–ë-21':
            re_call(call, year=r'-21', group_name=r'–ö–ë')
        elif call.data == '–ö–ó–ë-21':
            re_call(call, year=r'-21', group_name=r'–ö–ó–ë')
        elif call.data == '–†–ö–ë-21':
            re_call(call, year=r'-2', group_name=r'–†–ö–ë')
        elif call.data == '–≠–î-21':
            re_call(call, year=r'-21', group_name=r'–≠–î')
        elif call.data == '–ë–£–•-21':
            re_call(call, year=r'-21', group_name=r'–ë–£–•')
        elif call.data == '–Æ–ó–î-21':
            re_call(call, year=r'-21', group_name=r'–Æ–ó–î')
        elif call.data == '–Æ–í–î-21':
            re_call(call, year=r'-21', group_name=r'–Æ–í–î')
        elif call.data == '–ò–î-21':
            re_call(call, year=r'-21', group_name=r'–ò–î')
        elif call.data == '–ê–î-21':
            re_call(call, year=r'-21', group_name=r'–ê–î')
        elif call.data == '–†–î-21':
            re_call(call, year=r'-21', group_name=r'–†–î')
        elif call.data == '–°–ü-21':
            re_call(call, year=r'-21', group_name=r'–°–ü')
        elif call.data == '–≠–ó-21':
            re_call(call, year=r'-21', group_name=r'–≠–ó')
        elif call.data == '–†–ö–ó–ë-21':
            re_call(call, year=r'-21', group_name=r'–†–ö–ó–ë')
        elif call.data == '–ö–í–ë-21':
            re_call(call, year=r'-21', group_name=r'–ö–í–ë')
        elif call.data == '–Æ–î-21':
            re_call(call, year=r'-21', group_name=r'–Æ–î')
        elif call.data == '–ò–î-21':
            re_call(call, year=r'-21', group_name=r'–ò–î')
        elif call.data == '–£–°-21':
            re_call(call, year=r'-21', group_name=r'–£–°')
        elif call.data == '–£–ó-21':
            re_call(call, year=r'-21', group_name=r'–£–ó')
        elif call.data == '–≠–î-21':
            re_call(call, year=r'-21', group_name=r'–≠–î')
        elif call.data == '–≠–°-21':
            re_call(call, year=r'-21', group_name=r'–≠–°')
        elif call.data == '–ö–î–ë-21':
            re_call(call, year=r'-21', group_name=r'–ö–î–ë')
        elif call.data == '–£–î-21':
            re_call(call, year=r'-21', group_name=r'–£–î')
        elif call.data == '–ü–°–û-21':
            re_call(call, year=r'-21', group_name=r'–ü–°–û')
        elif call.data == '–ö–û–ú-21':
            re_call(call, year=r'-21', group_name=r'–ö–û–ú')
        elif call.data == '–ù–∞–∑–∞–¥':
            markup = types.InlineKeyboardMarkup(row_width=1)
            btn1 = types.InlineKeyboardButton("5 –∫—É—Ä—Å", callback_data="2017")
            btn2 = types.InlineKeyboardButton("4 –∫—É—Ä—Å", callback_data="2018")
            btn3 = types.InlineKeyboardButton("3 –∫—É—Ä—Å", callback_data="2019")
            btn4 = types.InlineKeyboardButton("2 –∫—É—Ä—Å", callback_data="2020")
            btn5 = types.InlineKeyboardButton("1 –∫—É—Ä—Å", callback_data="2021")
            markup.add(btn1, btn2, btn3, btn4, btn5)
            m = "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å"
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text=m,
                                  reply_markup=markup)

        mess = call
        groups1(mess)

# –ö–û–ú–ú–ï–ù–¢ –ò –û–¢–ú–ï–¢–ö–£ –ò–ù–õ–ê–ô–ù –ö–ù–û–ü–ö–ê–ú–ò!!!!!
@bot.message_handler(commands=['comment'])
def comment(message):
    m = "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    btn1 = types.KeyboardButton('–û—Ç–º–µ–Ω–∞')
    markup.add(btn1)
    mess = bot.send_message(message.chat.id, m, reply_markup=markup)
    bot.register_next_step_handler(mess, take_comment)


def take_comment(message):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–∏–ª! –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–¥–∂–µ–Ω–∏—è")
        bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        btn1 = types.KeyboardButton('–û—Ç–º–µ–Ω–∞')
        markup.add(btn1)
        comment.comm = message.text
        m = "–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–Ω—è—Ç–∏—è"
        mess = bot.send_message(message.chat.id, m, reply_markup=markup)
        bot.register_next_step_handler(mess, take_id_comm)


def take_id_comm(message):
    try:
        if message.text == "–û—Ç–º–µ–Ω–∞":
            bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–∏–ª! –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–¥–∂–µ–Ω–∏—è")
            bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
            btn1 = types.KeyboardButton('–û—Ç–º–µ–Ω–∞')
            markup.add(btn1)
            comment.token = user.token
            # data = {"token": comment.token, "group_id": None}
            # sched = requests.post(api + "scheduler", json=data)
            # sched_json = sched.json()
            # a = 0
            # days_leigth = len(sched_json['timetables'])
            # while a < days_leigth:
            #     sched = sched_json['timetables'][a]["schedulers"]
            #     leight = len(sched_json['timetables'][a]["schedulers"])
            #     a += 1
            #     i = 0
            #     if (message.text == sched_json['timetables'][a]["schedulers"][i]['area']):
            #         while i < leight:
            #             comm_id = (sched[i]["scheduler_id"])
            # comment.id = comm_id
            comment.id = message.text
            data = {"comment": comment.comm, "scheduler_id": comment.id, "token": comment.token}
            comm = requests.post(api + "comment", json=data)
            comm_json = comm.json()
            if comm:
                if comm_json["commentAnswerOption"]:
                    m = "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Å—Ç–∞–≤–ª–µ–Ω!"
                    bot.send_message(message.chat.id, m)
                if not comm_json["commentAnswerOption"]:
                    m = comm_json['commentAnswerInfo']
                    bot.send_message(message.chat.id, m)
    except:
        bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ü—Ä–æ–π–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–≤—Ç–æ—Ä–Ω–æ")


@bot.message_handler(commands=['check_in'])
def Totalizer(message):
    m = "–í–≤–µ–¥–∏—Ç–µ id –∑–∞–Ω—è—Ç–∏—è, –ù–∞–ø—Ä–∏–º–µ—Ä: \"1 –∏ 734 –∏ 49\" (–≤–ø–ª–æ—Ç—å –¥–æ –ø—è—Ç–∏ –∑–∞–Ω—è—Ç–∏–π)"
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    btn1 = types.KeyboardButton('–û—Ç–º–µ–Ω–∞')
    markup.add(btn1)
    mess = bot.send_message(message.chat.id, m, reply_markup=markup)
    bot.register_next_step_handler(mess, take_id_total)


def take_id_total(message):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–∏–ª! –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–¥–∂–µ–Ω–∏—è")
        bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
    else:
        try:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
            btn1 = types.KeyboardButton('–û—Ç–º–µ–Ω–∞')
            markup.add(btn1)
            nums = re.split(' –∏ ', message.text, maxsplit=5)
            tot.id = nums
            tot.token = user.token
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
            btn1 = types.KeyboardButton('–ü—Ä–∏–¥—É')
            btn2 = types.KeyboardButton('–ù–µ –ø—Ä–∏–¥—É')
            btn3 = types.KeyboardButton('–û—Ç–º–µ–Ω–∞')
            markup.add(btn1, btn2).add(btn3)
            m = "–ü—Ä–∏–¥–µ—Ç–µ –Ω–∞ –Ω–µ–µ?"
            mess = bot.send_message(message.chat.id, m, parse_mode='html', reply_markup=markup)
            bot.register_next_step_handler(mess, totalize)
        except:
            bot.send_message(message.chat.id,  "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ü—Ä–æ–π–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–≤—Ç–æ—Ä–Ω–æ")

def totalize(message):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–∏–ª! –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–¥–∂–µ–Ω–∏—è")
        bot.clear_step_handler_by_chat_id(chat_id=message.chat.id)
    else:
        if message.text == "–ü—Ä–∏–¥—É":
            tot.moreOrLess = True
        elif message.text == "–ù–µ –ø—Ä–∏–¥—É":
            tot.moreOrLess = False
        data = {"moreOrLess": tot.moreOrLess, "scheduler_id": tot.id, "token": tot.token}
        totalizer = requests.post(api + "totalizer", json=data)
        totalizer_json = totalizer.json()
        if totalizer_json['totalizerAnswerOption']:
            m = "–ü—Ä–∏–Ω—è—Ç–æ, –æ—Ç–º–µ—á–∞—é"
            bot.send_message(message.chat.id, m)
        else:
            m = totalizer_json['totalizerAnswerInfo']
            bot.send_message(message.chat.id, m)






bot.polling(none_stop=True)
